#include "Streebog.hpp"
#include <cstring>

static constexpr uint8_t Sbox[] = {
    252, 238, 221,  17, 207, 110,  49,  22, 251, 196, 250, 218,  35, 197,   4,  77,
    233, 119, 240, 219, 147,  46, 153, 186,  23,  54, 241, 187,  20, 205,  95, 193,
    249,  24, 101,  90, 226,  92, 239,  33, 129,  28,  60,  66, 139,   1, 142,  79,
      5, 132,   2, 174, 227, 106, 143, 160,   6,  11, 237, 152, 127, 212, 211,  31,
    235,  52,  44,  81, 234, 200,  72, 171, 242,  42, 104, 162, 253,  58, 206, 204,
    181, 112,  14,  86,   8,  12, 118,  18, 191, 114,  19,  71, 156, 183,  93, 135,
     21, 161, 150,  41,  16, 123, 154, 199, 243, 145, 120, 111, 157, 158, 178, 177,
     50, 117,  25,  61, 255,  53, 138, 126, 109,  84, 198, 128, 195, 189,  13,  87,
    223, 245,  36, 169,  62, 168,  67, 201, 215, 121, 214, 246, 124,  34, 185,   3,
    224,  15, 236, 222, 122, 148, 176, 188, 220, 232,  40,  80,  78,  51,  10,  74,
    167, 151,  96, 115,  30,   0,  98,  68,  26, 184,  56, 130, 100, 159,  38,  65,
    173,  69,  70, 146,  39,  94,  85,  47, 140, 163, 165, 125, 105, 213, 149,  59,
      7,  88, 179,  64, 134, 172,  29, 247,  48,  55, 107, 228, 136, 217, 231, 137,
    225,  27, 131,  73,  76,  63, 248, 254, 141,  83, 170, 144, 202, 216, 133,  97,
     32, 113, 103, 164,  45,  43,   9,  91, 203, 155,  37, 208, 190, 229, 108,  82,
     89, 166, 116, 210, 230, 244, 180, 192, 209, 102, 175, 194,  57,  75,  99, 182
};

static inline SecureBuffer<64> &substitute(SecureBuffer<64> &vector) noexcept {
    for (uint8_t i = 0; i < 64; ++i) vector[i] = Sbox[vector[i]];
    return vector;
}

static inline SecureBuffer<64> &permutate(SecureBuffer<64> &vector) noexcept {
    for (uint8_t i = 0; i < 8; ++i)
        for (uint8_t j = i + 1; j < 8; ++j)
            std::swap(vector[i * 8U + j], vector[j * 8U + i]);
    return vector;
}

static constexpr uint64_t LinearTransformMatrix[] {
    0x8e5940246ea5a670, 0x47a2201237dc5338, 0xad511009956ea71c, 0xd8a6088ac437dd0e,
    0x6c5304456295e007, 0x36a702ac31c4708d, 0x1bdd0156966238c8, 0x83e08e2b4b311c64,
    
    0x9c320ba85420fae4, 0x4e198b542a107d72, 0x2782cb2a1508b039, 0x9d41eb1584045892,
    0xc0aefb8442022c49, 0x6057f342210116aa, 0x30a5f7219e8e0b55, 0x18dcf59e4f478ba4,
    
    0xb905387a88346c45, 0xd28c1c3d441a36ac, 0x69460e90220d1b56, 0xba2307481188832b,
    0x5d9f8d248644cf9b, 0xa0c1c8124322e9c3, 0x50ee6409af11faef, 0x2877328ad9867df9,
    
    0xa8aae89cf05d2786, 0x5455744e78a09d43, 0x2aa43a273c50c0af, 0x15521d9d1e2860d9,
    0x842980c00f1430e2, 0x429a4060890a1871, 0x214d2030ca050cb6, 0x9ea81018658c065b,
    
    0x5114665f5df04d9d, 0xa60a33a1a078a8c0, 0x530597de503c5460, 0xa78cc56f281e2a30,
    0xdd46ecb9140f1518, 0xe02376d20a89840c, 0x709f3b6905ca4206, 0x38c193ba8c652103,
    
    0x6fe77a382ab5da90, 0xb9fd3d1c15d46d48, 0xd2f0900e846ab824, 0x6978480742355c12,
    0xba3c248d21942e09, 0x5d1e12c89e4a178a, 0xa00f09644f258545, 0x50898a32a99cccac,
    
    0x408f8e8180d311a0, 0x20c947ce40e78650, 0x10eaad6720fd4328, 0x0875d8bd10f0af14,
    0x04b46cd00878d90a, 0x025a3668043ce205, 0x012d1b34021e718c, 0x8e98831a010fb646,
    
    0x70b4a02ba7fa208e, 0x385a509bdd7d1047, 0x1c2d28c3e0b008ad, 0x0e9814ef705804d8,
    0x074c0af9382c026c, 0x8d2605f21c160136, 0xc8138c790e0b8e1b, 0x648746b2078b4783
};

static inline SecureBuffer<64> &linear(SecureBuffer<64> &vector) noexcept {
    for (uint8_t i = 0; i < 8; ++i) {
        uint64_t c = 0;
        for (uint8_t j = 0; j < 8; ++j)
            for (uint8_t k = 0; k < 8; ++k)
                if (vector[i * 8U + j] & (1 << (7 - k))) c ^= LinearTransformMatrix[j * 8U + k];
        if constexpr (std::endian::native == std::endian::little)
            for (uint8_t b = 0; b < 8; ++b)
                vector[i * 8U + b] = static_cast<uint8_t>(c >> (56 - 8 * b));
        else
            std::memcpy(vector.raw() + 8 * i, &c, 8);
    }
    return vector;
}

static constexpr uint8_t const_keys[12][64] = {
    {
        0x07, 0x45, 0xa6, 0xf2, 0x59, 0x65, 0x80, 0xdd,
        0x23, 0x4d, 0x74, 0xcc, 0x36, 0x74, 0x76, 0x05,
        0x15, 0xd3, 0x60, 0xa4, 0x08, 0x2a, 0x42, 0xa2,
        0x01, 0x69, 0x67, 0x92, 0x91, 0xe0, 0x7c, 0x4b,
        0xfc, 0xc4, 0x85, 0x75, 0x8d, 0xb8, 0x4e, 0x71,
        0x16, 0xd0, 0x45, 0x2e, 0x43, 0x76, 0x6a, 0x2f,
        0x1f, 0x7c, 0x65, 0xc0, 0x81, 0x2f, 0xcb, 0xeb,
        0xe9, 0xda, 0xca, 0x1e, 0xda, 0x5b, 0x08, 0xb1
    },
    {
        0xb7, 0x9b, 0xb1, 0x21, 0x70, 0x04, 0x79, 0xe6,
        0x56, 0xcd, 0xcb, 0xd7, 0x1b, 0xa2, 0xdd, 0x55,
        0xca, 0xa7, 0x0a, 0xdb, 0xc2, 0x61, 0xb5, 0x5c,
        0x58, 0x99, 0xd6, 0x12, 0x6b, 0x17, 0xb5, 0x9a,
        0x31, 0x01, 0xb5, 0x16, 0x0f, 0x5e, 0xd5, 0x61,
        0x98, 0x2b, 0x23, 0x0a, 0x72, 0xea, 0xfe, 0xf3,
        0xd7, 0xb5, 0x70, 0x0f, 0x46, 0x9d, 0xe3, 0x4f,
        0x1a, 0x2f, 0x9d, 0xa9, 0x8a, 0xb5, 0xa3, 0x6f
    },
    {
        0xb2, 0x0a, 0xba, 0x0a, 0xf5, 0x96, 0x1e, 0x99,
        0x31, 0xdb, 0x7a, 0x86, 0x43, 0xf4, 0xb6, 0xc2,
        0x09, 0xdb, 0x62, 0x60, 0x37, 0x3a, 0xc9, 0xc1,
        0xb1, 0x9e, 0x35, 0x90, 0xe4, 0x0f, 0xe2, 0xd3,
        0x7b, 0x7b, 0x29, 0xb1, 0x14, 0x75, 0xea, 0xf2,
        0x8b, 0x1f, 0x9c, 0x52, 0x5f, 0x5e, 0xf1, 0x06,
        0x35, 0x84, 0x3d, 0x6a, 0x28, 0xfc, 0x39, 0x0a,
        0xc7, 0x2f, 0xce, 0x2b, 0xac, 0xdc, 0x74, 0xf5
    },
    {
        0x2e, 0xd1, 0xe3, 0x84, 0xbc, 0xbe, 0x0c, 0x22,
        0xf1, 0x37, 0xe8, 0x93, 0xa1, 0xea, 0x53, 0x34,
        0xbe, 0x03, 0x52, 0x93, 0x33, 0x13, 0xb7, 0xd8,
        0x75, 0xd6, 0x03, 0xed, 0x82, 0x2c, 0xd7, 0xa9,
        0x3f, 0x35, 0x5e, 0x68, 0xad, 0x1c, 0x72, 0x9d,
        0x7d, 0x3c, 0x5c, 0x33, 0x7e, 0x85, 0x8e, 0x48,
        0xdd, 0xe4, 0x71, 0x5d, 0xa0, 0xe1, 0x48, 0xf9,
        0xd2, 0x66, 0x15, 0xe8, 0xb3, 0xdf, 0x1f, 0xef,
    },
    {
        0x57, 0xfe, 0x6c, 0x7c, 0xfd, 0x58, 0x17, 0x60,
        0xf5, 0x63, 0xea, 0xa9, 0x7e, 0xa2, 0x56, 0x7a,
        0x16, 0x1a, 0x27, 0x23, 0xb7, 0x00, 0xff, 0xdf,
        0xa3, 0xf5, 0x3a, 0x25, 0x47, 0x17, 0xcd, 0xbf,
        0xbd, 0xff, 0x0f, 0x80, 0xd7, 0x35, 0x9e, 0x35,
        0x4a, 0x10, 0x86, 0x16, 0x1f, 0x1c, 0x15, 0x7f,
        0x63, 0x23, 0xa9, 0x6c, 0x0c, 0x41, 0x3f, 0x9a,
        0x99, 0x47, 0x47, 0xad, 0xac, 0x6b, 0xea, 0x4b,
    },
    {
        0x6e, 0x7d, 0x64, 0x46, 0x7a, 0x40, 0x68, 0xfa,
        0x35, 0x4f, 0x90, 0x36, 0x72, 0xc5, 0x71, 0xbf,
        0xb6, 0xc6, 0xbe, 0xc2, 0x66, 0x1f, 0xf2, 0x0a,
        0xb4, 0xb7, 0x9a, 0x1c, 0xb7, 0xa6, 0xfa, 0xcf,
        0xc6, 0x8e, 0xf0, 0x9a, 0xb4, 0x9a, 0x7f, 0x18,
        0x6c, 0xa4, 0x42, 0x51, 0xf9, 0xc4, 0x66, 0x2d,
        0xc0, 0x39, 0x30, 0x7a, 0x3b, 0xc3, 0xa4, 0x6f,
        0xd9, 0xd3, 0x3a, 0x1d, 0xae, 0xae, 0x4f, 0xae
    },
    {
        0x93, 0xd4, 0x14, 0x3a, 0x4d, 0x56, 0x86, 0x88,
        0xf3, 0x4a, 0x3c, 0xa2, 0x4c, 0x45, 0x17, 0x35,
        0x04, 0x05, 0x4a, 0x28, 0x83, 0x69, 0x47, 0x06,
        0x37, 0x2c, 0x82, 0x2d, 0xc5, 0xab, 0x92, 0x09,
        0xc9, 0x93, 0x7a, 0x19, 0x33, 0x3e, 0x47, 0xd3,
        0xc9, 0x87, 0xbf, 0xe6, 0xc7, 0xc6, 0x9e, 0x39,
        0x54, 0x09, 0x24, 0xbf, 0xfe, 0x86, 0xac, 0x51,
        0xec, 0xc5, 0xaa, 0xee, 0x16, 0x0e, 0xc7, 0xf4
    },
    {
        0x1e, 0xe7, 0x02, 0xbf, 0xd4, 0x0d, 0x7f, 0xa4,
        0xd9, 0xa8, 0x51, 0x59, 0x35, 0xc2, 0xac, 0x36,
        0x2f, 0xc4, 0xa5, 0xd1, 0x2b, 0x8d, 0xd1, 0x69,
        0x90, 0x06, 0x9b, 0x92, 0xcb, 0x2b, 0x89, 0xf4,
        0x9a, 0xc4, 0xdb, 0x4d, 0x3b, 0x44, 0xb4, 0x89,
        0x1e, 0xde, 0x36, 0x9c, 0x71, 0xf8, 0xb7, 0x4e,
        0x41, 0x41, 0x6e, 0x0c, 0x02, 0xaa, 0xe7, 0x03,
        0xa7, 0xc9, 0x93, 0x4d, 0x42, 0x5b, 0x1f, 0x9b
    },
    {
        0xdb, 0x5a, 0x23, 0x83, 0x51, 0x44, 0x61, 0x72,
        0x60, 0x2a, 0x1f, 0xcb, 0x92, 0xdc, 0x38, 0x0e,
        0x54, 0x9c, 0x07, 0xa6, 0x9a, 0x8a, 0x2b, 0x7b,
        0xb1, 0xce, 0xb2, 0xdb, 0x0b, 0x44, 0x0a, 0x80,
        0x84, 0x09, 0x0d, 0xe0, 0xb7, 0x55, 0xd9, 0x3c,
        0x24, 0x42, 0x89, 0x25, 0x1b, 0x3a, 0x7d, 0x3a,
        0xde, 0x5f, 0x16, 0xec, 0xd8, 0x9a, 0x4c, 0x94,
        0x9b, 0x22, 0x31, 0x16, 0x54, 0x5a, 0x8f, 0x37
    },
    {
        0xed, 0x9c, 0x45, 0x98, 0xfb, 0xc7, 0xb4, 0x74,
        0xc3, 0xb6, 0x3b, 0x15, 0xd1, 0xfa, 0x98, 0x36,
        0xf4, 0x52, 0x76, 0x3b, 0x30, 0x6c, 0x1e, 0x7a,
        0x4b, 0x33, 0x69, 0xaf, 0x02, 0x67, 0xe7, 0x9f,
        0x03, 0x61, 0x33, 0x1b, 0x8a, 0xe1, 0xff, 0x1f,
        0xdb, 0x78, 0x8a, 0xff, 0x1c, 0xe7, 0x41, 0x89,
        0xf3, 0xf3, 0xe4, 0xb2, 0x48, 0xe5, 0x2a, 0x38,
        0x52, 0x6f, 0x05, 0x80, 0xa6, 0xde, 0xbe, 0xab
    },
    {
        0x1b, 0x2d, 0xf3, 0x81, 0xcd, 0xa4, 0xca, 0x6b,
        0x5d, 0xd8, 0x6f, 0xc0, 0x4a, 0x59, 0xa2, 0xde,
        0x98, 0x6e, 0x47, 0x7d, 0x1d, 0xcd, 0xba, 0xef,
        0xca, 0xb9, 0x48, 0xea, 0xef, 0x71, 0x1d, 0x8a,
        0x79, 0x66, 0x84, 0x14, 0x21, 0x80, 0x01, 0x20,
        0x61, 0x07, 0xab, 0xeb, 0xbb, 0x6b, 0xfa, 0xd8,
        0x94, 0xfe, 0x5a, 0x63, 0xcd, 0xc6, 0x02, 0x30,
        0xfb, 0x89, 0xc8, 0xef, 0xd0, 0x9e, 0xcd, 0x7b
    },
    {
        0x20, 0xd7, 0x1b, 0xf1, 0x4a, 0x92, 0xbc, 0x48,
        0x99, 0x1b, 0xb2, 0xd9, 0xd5, 0x17, 0xf4, 0xfa,
        0x52, 0x28, 0xe1, 0x88, 0xaa, 0xa4, 0x1d, 0xe7,
        0x86, 0xcc, 0x91, 0x18, 0x9d, 0xef, 0x80, 0x5d,
        0x9b, 0x9f, 0x21, 0x30, 0xd4, 0x12, 0x20, 0xf8,
        0x77, 0x1d, 0xdf, 0xbc, 0x32, 0x3c, 0xa4, 0xcd,
        0x7a, 0xb1, 0x49, 0x04, 0xb0, 0x80, 0x13, 0xd2,
        0xba, 0x31, 0x16, 0xf1, 0x67, 0xe7, 0x8e, 0x37
    }
};

void Streebog::compress(const SecureBuffer<64> &N, const SecureBuffer<64> &m) noexcept {
    // Функция E из стандарта.
    SecureBuffer<64> key(hash_);
    linear(permutate(substitute(key += N)));
    SecureBuffer<64> E(m);
    linear(permutate(substitute(E += key)));
    for (uint8_t i = 0; i < 11; ++i) {
        linear(permutate(substitute(key += const_keys[i])));
        linear(permutate(substitute(E += key)));
    }
    linear(permutate(substitute(key += const_keys[11])));
    E += key;
    // Конец E.
    (hash_ += E) += m;
}

void Streebog::addToN(const uint16_t addition) noexcept {
    uint16_t tmp =
        static_cast<uint16_t>(N_[0]) +
        addition;
    N_[0] = static_cast<uint8_t>(tmp);
    tmp >>= 8;
    for (size_t i = 1; i < 64 && tmp; ++i) {
        tmp = static_cast<uint16_t>(N_[i]) + tmp;
        N_[i] = static_cast<uint8_t>(tmp);
        tmp >>= 8;
    }
}

void Streebog::addToSum() noexcept {
    uint16_t tmp = 0;
    for (size_t i = 0; i < 64; ++i) {
        tmp = static_cast<uint16_t>(
            static_cast<uint16_t>(Sum_[i]) + 
            static_cast<uint16_t>(buffer_[i]) +
            (tmp >> 8)
        );
        Sum_[i] = static_cast<uint8_t>(tmp);
    }
}

void Streebog::initHash() {
    if (variant_ == Variant::Streebog512) hash_.zero();
    else std::fill(hash_.begin(), hash_.end(), 1);
}

Streebog::Streebog(const Variant variant) noexcept
: buffered_length_(0),  variant_(variant) {
    initHash();
    N_.zero();
    Sum_.zero();
}

void Streebog::update(const uint8_t *data, const size_t size) noexcept {
    size_t current_index = 0;
    while (size - current_index > 0) {
        if (buffered_length_ == 64) {
            buffered_length_ = 0;
            compress(N_, buffer_);
            addToN(512);
            addToSum();
        }
        uint8_t to_copy = static_cast<uint8_t>(
            std::min(static_cast<size_t>(64 - buffered_length_), size - current_index)
        );
        std::copy(
            data + static_cast<ptrdiff_t>(current_index),
            data + static_cast<ptrdiff_t>(current_index + to_copy),
            buffer_.begin() + buffered_length_
        );
        buffered_length_ += to_copy;
        current_index += to_copy;
    }
}

void Streebog::finalize() noexcept {
    if (buffered_length_ != 64) {
        std::fill(buffer_.begin() + buffered_length_ + 1, buffer_.end(), 0);
        buffer_[buffered_length_] = 0x01;
    }
    else {
        static constexpr uint8_t full_block_pad[64] = {0x01};
        update(full_block_pad, 64);
        buffered_length_ = 0;
    }
    compress(N_, buffer_);
    addToN(static_cast<uint16_t>(buffered_length_) * 8);
    addToSum();
    SecureBuffer<64> zeroed; zeroed.zero();
    compress(zeroed, N_);
    compress(zeroed, Sum_);
}

std::vector<uint8_t> Streebog::digest(const EndianOfUInt512 endian) noexcept {
    finalize();
    std::vector<uint8_t> result;
    if (variant_ == Variant::Streebog512)
        result = std::vector<uint8_t>(hash_.begin(), hash_.end());
    else
        result = std::vector<uint8_t>(hash_.begin() + 32, hash_.end());
    if (endian == EndianOfUInt512::Big)
        std::reverse(result.begin(), result.end());
    return result;
}

void Streebog::digest(uint8_t *digest_buffer, const EndianOfUInt512 endian) noexcept {
    finalize();
    if (variant_ == Variant::Streebog512)
        std::copy(hash_.begin(), hash_.end(), digest_buffer);
    else
        std::copy(hash_.begin() + 32, hash_.end(), digest_buffer);
    if (endian == EndianOfUInt512::Big)
        std::reverse(digest_buffer, digest_buffer +
            (variant_ == Variant::Streebog512 ? 64 : 32));
}

#ifdef UNIT_TESTS

SecureBuffer<64> &testSubstitute(SecureBuffer<64> &vector) noexcept {
    return substitute(vector);
}

SecureBuffer<64> &testPermutate(SecureBuffer<64> &vector) noexcept {
    return permutate(vector);
}

SecureBuffer<64> &testLinear(SecureBuffer<64> &vector) noexcept {
    return linear(vector);
}

SecureBuffer<64> &Streebog::getBuffer() noexcept {
    return buffer_;
}

uint8_t Streebog::getBufferedLength() noexcept {
    return buffered_length_;
}

SecureBuffer<64> &Streebog::getHash() noexcept {
    return hash_;
}

SecureBuffer<64> &Streebog::getN() noexcept {
    return N_;
}

SecureBuffer<64> &Streebog::getSum() noexcept {
    return Sum_;
}
void Streebog::testAddToN(const uint16_t addition) noexcept {
    addToN(addition);
}
void Streebog::testAddToSum() noexcept {
    addToSum();
}
void Streebog::testCompress(const SecureBuffer<64> &N, const SecureBuffer<64> &m) noexcept {
    compress(N, m);
}

#endif