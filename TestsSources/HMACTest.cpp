/*  Тесты с маленькими ключами взяты из Р 50.1.113.
    Тесты с большими ключами сгенерирваны с помощью
    OpenSSL 3.5.0 c GostEngine 3.0.3.r760.e0a500a-1.
*/
#include <gtest/gtest.h>
#include <iomanip>
#include "HMAC.hpp"
#include "Streebog.hpp"

template <size_t N>
void PrintTo(const SecureBuffer<N> &buf, std::ostream* os) {
    *os << std::hex << std::uppercase << std::setfill('0');
    for (uint8_t byte : buf)
        *os << std::setw(2) << static_cast<int>(byte);
}

std::string ToHex(const std::vector<uint8_t>& data) {
    std::ostringstream oss;
    oss << std::hex << std::uppercase << std::setfill('0');
    for (uint8_t b : data)
        oss << std::setw(2) << static_cast<int>(b);
    return oss.str();
}

TEST(HMACTest, TestHMACStreebog256SmallKey) {
    static const std::vector<uint8_t> text = {
        0x01, 0x26, 0xbd, 0xb8, 0x78, 0x00, 0xaf, 0x21,
        0x43, 0x41, 0x45, 0x65, 0x63, 0x78, 0x01, 0x00
    };
    static const SecureBuffer key = {
        0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,
        0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f,
        0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17,
        0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f
    };
    static const std::vector<uint8_t> expected_mac = {
        0xa1, 0xaa, 0x5f, 0x7d, 0xe4, 0x02, 0xd7, 0xb3,
        0xd3, 0x23, 0xf2, 0x99, 0x1c, 0x8d, 0x45, 0x34,
        0x01, 0x31, 0x37, 0x01, 0x0a, 0x83, 0x75, 0x4f,
        0xd0, 0xaf, 0x6d, 0x7c, 0xd4, 0x92, 0x2e, 0xd9
    };
    Streebog256 hasher;
    HMAC HMACStreebog256(hasher, key);
    HMACStreebog256.update(text);
    std::vector<uint8_t> mac = HMACStreebog256.digest();
    EXPECT_TRUE(mac == expected_mac)
        << "mac: " << ToHex(mac) << "\n"
        << "Ожидаемый mac: " << ToHex(expected_mac);
}

TEST(HMACTest, TestHMACStreebog512SmallKey) {
    static const std::vector<uint8_t> text = {
        0x01, 0x26, 0xbd, 0xb8, 0x78, 0x00, 0xaf, 0x21,
        0x43, 0x41, 0x45, 0x65, 0x63, 0x78, 0x01, 0x00
    };
    static const SecureBuffer key = {
        0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,
        0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f,
        0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17,
        0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f
    };
    static const std::vector<uint8_t> expected_mac = {
        0xa5, 0x9b, 0xab, 0x22, 0xec, 0xae, 0x19, 0xc6,
        0x5f, 0xbd, 0xe6, 0xe5, 0xf4, 0xe9, 0xf5, 0xd8,
        0x54, 0x9d, 0x31, 0xf0, 0x37, 0xf9, 0xdf, 0x9b,
        0x90, 0x55, 0x00, 0xe1, 0x71, 0x92, 0x3a, 0x77,
        0x3d, 0x5f, 0x15, 0x30, 0xf2, 0xed, 0x7e, 0x96,
        0x4c, 0xb2, 0xee, 0xdc, 0x29, 0xe9, 0xad, 0x2f,
        0x3a, 0xfe, 0x93, 0xb2, 0x81, 0x4f, 0x79, 0xf5,
        0x00, 0x0f, 0xfc, 0x03, 0x66, 0xc2, 0x51, 0xe6
    };
    Streebog512 hasher;
    HMAC HMACStreebog512(hasher, key);
    HMACStreebog512.update(text);
    std::vector<uint8_t> mac = HMACStreebog512.digest();
    EXPECT_TRUE(mac == expected_mac)
        << "mac: " << ToHex(mac) << "\n"
        << "Ожидаемый mac: " << ToHex(expected_mac);
}

TEST(HMACTest, TestHMACStreebog256BigKey) {
    static const std::vector<uint8_t> text = {
        0x01, 0x26, 0xbd, 0xb8, 0x78, 0x00, 0xaf, 0x21,
        0x43, 0x41, 0x45, 0x65, 0x63, 0x78, 0x01, 0x00
    };
    static const SecureBuffer key = {
        0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,
        0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f,
        0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17,
        0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f,
        0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,
        0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f,
        0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17,
        0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f,
        0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,
        0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f,
        0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17,
        0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f,
        0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,
        0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f,
        0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17,
        0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f
    };
    static const std::vector<uint8_t> expected_mac = {
        0xED, 0xB8, 0x18, 0x66, 0x30, 0xBD, 0x1A, 0x3E,
        0xEE, 0x52, 0x62, 0x45, 0xA5, 0x49, 0x56, 0x29,
        0xE2, 0x59, 0x80, 0x80, 0xD7, 0x6D, 0x7E, 0x2B,
        0x98, 0x9C, 0x86, 0xC8, 0xC2, 0x09, 0x97, 0x56
    };
    Streebog256 hasher;
    HMAC HMACStreebog256(hasher, key);
    HMACStreebog256.update(text);
    std::vector<uint8_t> mac = HMACStreebog256.digest();
    EXPECT_TRUE(mac == expected_mac)
        << "mac: " << ToHex(mac) << "\n"
        << "Ожидаемый mac: " << ToHex(expected_mac);
}

TEST(HMACTest, TestHMACStreebog512BigKey) {
    static const std::vector<uint8_t> text = {
        0x01, 0x26, 0xbd, 0xb8, 0x78, 0x00, 0xaf, 0x21,
        0x43, 0x41, 0x45, 0x65, 0x63, 0x78, 0x01, 0x00
    };
    static const SecureBuffer key = {
        0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,
        0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f,
        0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17,
        0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f,
        0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,
        0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f,
        0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17,
        0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f,
        0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,
        0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f,
        0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17,
        0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f,
        0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,
        0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f,
        0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17,
        0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f
    };
    static const std::vector<uint8_t> expected_mac = {
        0x3F, 0x37, 0x74, 0x82, 0x91, 0x53, 0xE1, 0xE7,
        0x15, 0xE0, 0x61, 0x66, 0x22, 0x59, 0x9B, 0x59,
        0x84, 0xA9, 0x67, 0x03, 0xC8, 0xAB, 0x28, 0x6F,
        0x39, 0x22, 0x69, 0xD4, 0xA8, 0xB2, 0x6A, 0x4D,
        0x01, 0x9D, 0x8B, 0x01, 0x4A, 0xE0, 0x82, 0x92,
        0x26, 0xC2, 0xD7, 0x39, 0xCF, 0xD2, 0x56, 0x27,
        0x1B, 0xC8, 0x53, 0x1A, 0xFF, 0xBA, 0xF5, 0xDD,
        0xF7, 0x10, 0x9B, 0x6A, 0x7D, 0xC5, 0x3A, 0x8A
    };
    Streebog512 hasher;
    HMAC HMACStreebog512(hasher, key);
    HMACStreebog512.update(text);
    std::vector<uint8_t> mac = HMACStreebog512.digest();
    EXPECT_TRUE(mac == expected_mac)
        << "mac: " << ToHex(mac) << "\n"
        << "Ожидаемый mac: " << ToHex(expected_mac);
}

TEST(HMACTest, TestHMACClear) {
    static const std::vector<uint8_t> text = {
        0x01, 0x26, 0xbd, 0xb8, 0x78, 0x00, 0xaf, 0x21,
        0x43, 0x41, 0x45, 0x65, 0x63, 0x78, 0x01, 0x00
    };
    static const SecureBuffer key = {
        0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,
        0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f,
        0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17,
        0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f
    };
    static const std::vector<uint8_t> expected_mac = {
        0xa5, 0x9b, 0xab, 0x22, 0xec, 0xae, 0x19, 0xc6,
        0x5f, 0xbd, 0xe6, 0xe5, 0xf4, 0xe9, 0xf5, 0xd8,
        0x54, 0x9d, 0x31, 0xf0, 0x37, 0xf9, 0xdf, 0x9b,
        0x90, 0x55, 0x00, 0xe1, 0x71, 0x92, 0x3a, 0x77,
        0x3d, 0x5f, 0x15, 0x30, 0xf2, 0xed, 0x7e, 0x96,
        0x4c, 0xb2, 0xee, 0xdc, 0x29, 0xe9, 0xad, 0x2f,
        0x3a, 0xfe, 0x93, 0xb2, 0x81, 0x4f, 0x79, 0xf5,
        0x00, 0x0f, 0xfc, 0x03, 0x66, 0xc2, 0x51, 0xe6
    };
    Streebog512 hasher;
    HMAC HMACStreebog512(hasher, key);
    for (uint8_t i = 0; i < 2; ++i) {
        HMACStreebog512.update(text);
        std::vector<uint8_t> mac = HMACStreebog512.digest();
        EXPECT_TRUE(mac == expected_mac)
            << "mac: " << ToHex(mac) << "\n"
            << "Ожидаемый mac: " << ToHex(expected_mac);
        HMACStreebog512.clear();
    }
}

TEST(HMACTest, TestHMACRaw) {
    static const uint8_t text[] = {
        0x01, 0x26, 0xbd, 0xb8, 0x78, 0x00, 0xaf, 0x21,
        0x43, 0x41, 0x45, 0x65, 0x63, 0x78, 0x01, 0x00
    };
    static const SecureBuffer key = {
        0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,
        0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f,
        0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17,
        0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f
    };
    static const std::vector<uint8_t> expected_mac = {
        0xa5, 0x9b, 0xab, 0x22, 0xec, 0xae, 0x19, 0xc6,
        0x5f, 0xbd, 0xe6, 0xe5, 0xf4, 0xe9, 0xf5, 0xd8,
        0x54, 0x9d, 0x31, 0xf0, 0x37, 0xf9, 0xdf, 0x9b,
        0x90, 0x55, 0x00, 0xe1, 0x71, 0x92, 0x3a, 0x77,
        0x3d, 0x5f, 0x15, 0x30, 0xf2, 0xed, 0x7e, 0x96,
        0x4c, 0xb2, 0xee, 0xdc, 0x29, 0xe9, 0xad, 0x2f,
        0x3a, 0xfe, 0x93, 0xb2, 0x81, 0x4f, 0x79, 0xf5,
        0x00, 0x0f, 0xfc, 0x03, 0x66, 0xc2, 0x51, 0xe6
    };
    Streebog512 hasher;
    HMAC HMACStreebog512(hasher, key);
    HMACStreebog512.update(text, 16);
    std::vector<uint8_t> mac(64);
    HMACStreebog512.digest(mac.data());
    EXPECT_TRUE(mac == expected_mac)
        << "mac: " << ToHex(mac) << "\n"
        << "Ожидаемый mac: " << ToHex(expected_mac);
}

int main(int argc, char **argv) {
    ::testing::InitGoogleTest(&argc, argv);
    return RUN_ALL_TESTS();
}