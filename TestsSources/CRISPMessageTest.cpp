#include <gtest/gtest.h>
#include <iomanip>
#include "CRISPMessage.hpp"

std::string toHex(const std::vector<uint8_t>& data) {
    std::ostringstream oss;
    oss << std::hex << std::uppercase << std::setfill('0');
    for (uint8_t b : data)
        oss << std::setw(2) << static_cast<int>(b);
    return oss.str();
}

void PrintTo(const CRISPMessage &message, std::ostream* os) {
    *os << "ExternalKeyIDFlag:  " << message.externalKeyIDFlag() << "\n"
        << "Version:            " << message.version() << "\n"
        << "CryptographicSuite: " << int(message.cryptographicSuite()) << "\n"
        << "KeyID size:         " << int(message.keyID().size) << "\n"
        << "KeyID small value:  " << int(message.keyID().small_value) << "\n"
        << "KeyID big value:    " << toHex(message.keyID().big_value) << "\n"
        << "SeqNum:             " << message.seqNum() << "\n"
        << "PayioadData:        " << toHex(message.payload()) << "\n"
        << "ICV:                " << toHex(message.ICV());
}

TEST(CRISPMessageTest, Serialize) {
    static const CRISPMessage message(
        true, 0,
        CryptographicSuites::NULL_KuznechikCMAC_256_128_R13235651022_NMAC_NMAC,
        {0, {}, 0}, 0x0b76e6736001,
        {
            0xd3, 0x24, 0x64, 0x3a, 0xef, 0xd9, 0x7b, 0x93,
            0xb1, 0x8d, 0x34, 0x3a, 0x2f, 0xba, 0x47, 0x7e,
            0xc7, 0x04, 0xcd, 0x8d, 0x14, 0xac, 0x1c, 0xf7,
            0x4c, 0xeb, 0x25, 0x57, 0x7a, 0xf8, 0xfc, 0x2c,
            0x25, 0xfa, 0x90, 0x50, 0xa1
        },
        {
            0x80, 0xcb, 0x03, 0x7c, 0x01, 0x53, 0x2a, 0x98,
            0x79, 0x85, 0xba, 0xe5, 0xad, 0x20, 0x4d, 0x53,
            0x06, 0x53, 0x73, 0xa4, 0xb3, 0x00, 0xbd, 0x89,
            0x0f, 0xe3, 0x10, 0x36, 0xca, 0x73, 0x2d, 0x68,
            0x37, 0xaf, 0xc5, 0xac, 0x61, 0x43, 0x2f, 0x6e,
            0x2b, 0xc4, 0x1f, 0xab, 0x30, 0xbf, 0x71, 0x50
        }
    );
    static const std::vector<uint8_t> expected_message = {
        0x80, 0x00, 0x00, 0x80, 0x0b, 0x76, 0xe6, 0x73,
        0x60, 0x01, 0xd3, 0x24, 0x64, 0x3a, 0xef, 0xd9,
        0x7b, 0x93, 0xb1, 0x8d, 0x34, 0x3a, 0x2f, 0xba,
        0x47, 0x7e, 0xc7, 0x04, 0xcd, 0x8d, 0x14, 0xac,
        0x1c, 0xf7, 0x4c, 0xeb, 0x25, 0x57, 0x7a, 0xf8,
        0xfc, 0x2c, 0x25, 0xfa, 0x90, 0x50, 0xa1, 0x80,
        0xcb, 0x03, 0x7c, 0x01, 0x53, 0x2a, 0x98, 0x79,
        0x85, 0xba, 0xe5, 0xad, 0x20, 0x4d, 0x53, 0x06,
        0x53, 0x73, 0xa4, 0xb3, 0x00, 0xbd, 0x89, 0x0f,
        0xe3, 0x10, 0x36, 0xca, 0x73, 0x2d, 0x68, 0x37,
        0xaf, 0xc5, 0xac, 0x61, 0x43, 0x2f, 0x6e, 0x2b,
        0xc4, 0x1f, 0xab, 0x30, 0xbf, 0x71, 0x50
    };
    EXPECT_EQ(message.serialize(), expected_message);
}

TEST(CRISPMessageTest, Deserialize) {
    static const CRISPMessage expected_message(
        true, 0,
        CryptographicSuites::NULL_KuznechikCMAC_256_128_R13235651022_NMAC_NMAC,
        {0, {}, 0}, 0x0b76e6736001,
        {
            0xd3, 0x24, 0x64, 0x3a, 0xef, 0xd9, 0x7b, 0x93,
            0xb1, 0x8d, 0x34, 0x3a, 0x2f, 0xba, 0x47, 0x7e,
            0xc7, 0x04, 0xcd, 0x8d, 0x14, 0xac, 0x1c, 0xf7,
            0x4c, 0xeb, 0x25, 0x57, 0x7a, 0xf8, 0xfc, 0x2c,
            0x25, 0xfa, 0x90, 0x50, 0xa1
        },
        {
            0x80, 0xcb, 0x03, 0x7c, 0x01, 0x53, 0x2a, 0x98,
            0x79, 0x85, 0xba, 0xe5, 0xad, 0x20, 0x4d, 0x53,
            0x06, 0x53, 0x73, 0xa4, 0xb3, 0x00, 0xbd, 0x89,
            0x0f, 0xe3, 0x10, 0x36, 0xca, 0x73, 0x2d, 0x68,
            0x37, 0xaf, 0xc5, 0xac, 0x61, 0x43, 0x2f, 0x6e,
            0x2b, 0xc4, 0x1f, 0xab, 0x30, 0xbf, 0x71, 0x50
        }
    );
    static const std::vector<uint8_t> message = {
        0x80, 0x00, 0x00, 0x80, 0x0b, 0x76, 0xe6, 0x73,
        0x60, 0x01, 0xd3, 0x24, 0x64, 0x3a, 0xef, 0xd9,
        0x7b, 0x93, 0xb1, 0x8d, 0x34, 0x3a, 0x2f, 0xba,
        0x47, 0x7e, 0xc7, 0x04, 0xcd, 0x8d, 0x14, 0xac,
        0x1c, 0xf7, 0x4c, 0xeb, 0x25, 0x57, 0x7a, 0xf8,
        0xfc, 0x2c, 0x25, 0xfa, 0x90, 0x50, 0xa1, 0x80,
        0xcb, 0x03, 0x7c, 0x01, 0x53, 0x2a, 0x98, 0x79,
        0x85, 0xba, 0xe5, 0xad, 0x20, 0x4d, 0x53, 0x06,
        0x53, 0x73, 0xa4, 0xb3, 0x00, 0xbd, 0x89, 0x0f,
        0xe3, 0x10, 0x36, 0xca, 0x73, 0x2d, 0x68, 0x37,
        0xaf, 0xc5, 0xac, 0x61, 0x43, 0x2f, 0x6e, 0x2b,
        0xc4, 0x1f, 0xab, 0x30, 0xbf, 0x71, 0x50
    };
    EXPECT_EQ(CRISPMessage(message), expected_message);
}

int main(int argc, char **argv) {
    ::testing::InitGoogleTest(&argc, argv);
    return RUN_ALL_TESTS();
}