#include <gtest/gtest.h>
#ifndef UNIT_TESTS
#define UNIT_TESTS
#endif
#include "Streebog.hpp"
#include <iomanip>

template <size_t N>
void PrintTo(const SecureBuffer<N> &buf, std::ostream* os) {
    *os << std::hex << std::uppercase << std::setfill('0');
    for (uint8_t byte : buf)
        *os << std::setw(2) << static_cast<int>(byte);
}

std::string ToHex(const std::vector<uint8_t>& data) {
    std::ostringstream oss;
    oss << std::hex << std::uppercase << std::setfill('0');
    for (uint8_t b : data)
        oss << std::setw(2) << static_cast<int>(b);
    return oss.str();
}

TEST(StreebogTest, TestLPS) {
    SecureBuffer<64> pts[5] = {
        {
            0x44, 0x94, 0xe6, 0xfd, 0x1a, 0xc9, 0xb5, 0x84,
            0x4c, 0x9c, 0xe4, 0xff, 0x1c, 0xcf, 0xb7, 0x86,
            0x42, 0x92, 0xec, 0xf7, 0x1e, 0xcd, 0xb1, 0x80,
            0x40, 0x90, 0xe2, 0xf9, 0x16, 0xc5, 0xb3, 0x82,
            0x46, 0x96, 0xe0, 0xfb, 0x18, 0xcb, 0xbb, 0x8a,
            0x44, 0x94, 0xe6, 0xfd, 0x1a, 0xc9, 0xb5, 0x84,
            0x4c, 0x9c, 0xe4, 0xff, 0x1c, 0xcf, 0xb7, 0x86,
            0x42, 0x92, 0xec, 0xf7, 0x1e, 0xcd, 0xb1, 0xb2
        },
        {
            0x73, 0xe0, 0x72, 0x3c, 0x77, 0x99, 0x03, 0x6e,
            0x57, 0xe8, 0xa0, 0x02, 0x18, 0x88, 0xf5, 0xb6,
            0x61, 0x76, 0xb4, 0x6a, 0x26, 0xd6, 0xc1, 0x11,
            0x75, 0xcc, 0xb3, 0x5c, 0xbf, 0x1c, 0xff, 0xf8,
            0x88, 0x61, 0x51, 0xbb, 0xa3, 0x44, 0xcd, 0xc2,
            0x62, 0x75, 0x91, 0xe0, 0x6d, 0x8a, 0xe9, 0x9c,
            0x6b, 0xd9, 0xb1, 0x0e, 0xaf, 0xd3, 0x48, 0x58,
            0x9d, 0x7f, 0x1e, 0xd0, 0xf4, 0xa7, 0x8b, 0x02
        },
        {
            0x25, 0x6e, 0x49, 0x83, 0x74, 0xdb, 0xf3, 0x14,
            0x2d, 0x66, 0x4b, 0x81, 0x72, 0xdd, 0xf1, 0x16,
            0x23, 0x68, 0x43, 0x89, 0x70, 0xdf, 0xf7, 0x10,
            0x21, 0x6a, 0x4d, 0x87, 0x78, 0xd7, 0xf5, 0x12,
            0x27, 0x6c, 0x4f, 0x85, 0x76, 0xd9, 0xfd, 0x1a,
            0x25, 0x6e, 0x49, 0x83, 0x74, 0xdb, 0xf3, 0x14,
            0x2d, 0x66, 0x4b, 0x81, 0x72, 0xdd, 0xf1, 0x16,
            0x23, 0x68, 0x43, 0x89, 0x70, 0xdf, 0xf7, 0x22
        },
        {
            0x12, 0x1a, 0xdd, 0x42, 0x19, 0x8b, 0x45, 0xfe,
            0x36, 0x12, 0x0f, 0x7c, 0x76, 0x9a, 0xb3, 0x26,
            0x00, 0x8c, 0x1b, 0x14, 0x48, 0xc4, 0x87, 0x81,
            0x14, 0x36, 0x1c, 0x22, 0xd1, 0x0e, 0xb9, 0x68,
            0xe9, 0x9b, 0xfe, 0xc5, 0xcd, 0x56, 0x8b, 0x52,
            0x03, 0x8f, 0x3e, 0x9e, 0x03, 0x98, 0xaf, 0x0c,
            0x0a, 0x23, 0x1e, 0x70, 0xc1, 0xc1, 0x0e, 0xc8,
            0xfc, 0x85, 0xb1, 0xae, 0x9a, 0xb5, 0xcd, 0x92
        },
        {
            0xa5, 0x40, 0xf4, 0x2c, 0xcb, 0x0e, 0x73, 0x5b,
            0x58, 0x85, 0x05, 0x3c, 0xde, 0x14, 0x62, 0x5d,
            0x92, 0x4d, 0xf4, 0x2c, 0xc3, 0x0f, 0x75, 0x5b,
            0x58, 0x85, 0x36, 0x2b, 0xd0, 0x0e, 0x79, 0x93,
            0x85, 0x85, 0x38, 0x20, 0xde, 0x03, 0xa3, 0x42,
            0x86, 0x55, 0x31, 0x25, 0xce, 0x10, 0x6b, 0x93,
            0x99, 0x45, 0xf4, 0x3b, 0xde, 0x1c, 0x62, 0x43,
            0x8f, 0x5a, 0xf4, 0x21, 0xc5, 0x06, 0x69, 0x48
        },
        
    };
    static const SecureBuffer<64> res[5] = {
        {
            0xb9, 0x1b, 0x12, 0x28, 0x50, 0xf6, 0xcd, 0x90,
            0xf6, 0x2c, 0xad, 0x0d, 0xb2, 0x5f, 0x46, 0xbe,
            0x35, 0x1e, 0xc0, 0x71, 0x4b, 0xfc, 0x43, 0xfc,
            0xd4, 0x2f, 0x5c, 0x47, 0xdf, 0xa8, 0x78, 0xCe,
            0xa0, 0x12, 0xe2, 0xc0, 0xeb, 0x53, 0x79, 0x1e,
            0xc2, 0xe4, 0x2a, 0x60, 0x89, 0x91, 0x57, 0x56,
            0x3f, 0x65, 0x83, 0x31, 0x6f, 0x3f, 0xc7, 0x24,
            0x80, 0x75, 0xe0, 0xd8, 0xd4, 0x59, 0x00, 0xe6
        },
        {
            0x1e, 0xcf, 0x46, 0x0c, 0xf7, 0x8a, 0xd1, 0xf4,
            0x33, 0xec, 0x7e, 0x1d, 0xbd, 0x28, 0xf7, 0x36,
            0x10, 0x30, 0x51, 0xa0, 0x2b, 0xcd, 0x69, 0x35,
            0x97, 0x27, 0xda, 0xb2, 0xf0, 0x14, 0xbe, 0x88,
            0xc1, 0xe9, 0xda, 0x07, 0x08, 0x01, 0x3d, 0xa7,
            0xe9, 0x2e, 0xef, 0x3a, 0xd2, 0x02, 0xe9, 0xe0,
            0x0d, 0xe8, 0x74, 0xc7, 0xeb, 0xc3, 0xf2, 0x13,
            0x8f, 0xd7, 0x2f, 0x64, 0x07, 0x08, 0xb0, 0xd0
        },
        {
            0x02, 0xef, 0xb2, 0x3e, 0x2c, 0x6d, 0x16, 0xc4,
            0x02, 0x04, 0x3b, 0xfa, 0x44, 0xae, 0xa6, 0xda,
            0x8a, 0x35, 0xc4, 0x6a, 0xd4, 0x09, 0x7d, 0x3e,
            0x7b, 0x6d, 0xaa, 0xb7, 0x21, 0x01, 0x65, 0x55,
            0x40, 0x93, 0xfb, 0xbd, 0x5f, 0x9d, 0xae, 0x84,
            0x0d, 0x41, 0x8c, 0xf6, 0xc0, 0x18, 0x3f, 0x56,
            0x3c, 0x5b, 0xfd, 0xc2, 0xc9, 0x08, 0x5e, 0x1d,
            0x61, 0xa2, 0xa0, 0x17, 0x89, 0x36, 0x49, 0xe5
        },
        {
            0xb9, 0x5e, 0x4a, 0x9d, 0xc3, 0x0c, 0x7d, 0x0c,
            0xcd, 0xbf, 0x01, 0x84, 0x8c, 0xd6, 0x11, 0xe6,
            0x11, 0x35, 0x63, 0xea, 0x5e, 0x6b, 0x7e, 0x9c,
            0xb1, 0x66, 0x6a, 0xa6, 0x93, 0xde, 0x22, 0xda,
            0x49, 0xa5, 0x04, 0xa9, 0xb6, 0xfa, 0x1c, 0x45,
            0xbf, 0x26, 0xbe, 0x88, 0xdf, 0x69, 0x97, 0x34,
            0xea, 0x4c, 0x69, 0x33, 0x82, 0xcb, 0xd6, 0x3b,
            0xea, 0xeb, 0xb2, 0x76, 0x31, 0x8f, 0xee, 0x18
        },
        {
            0xf1, 0x4a, 0x10, 0xe0, 0xac, 0x8e, 0x86, 0x3a,
            0xcd, 0x62, 0x22, 0x49, 0xbe, 0xbb, 0x3c, 0x75,
            0x53, 0x63, 0x6f, 0x43, 0xa7, 0x83, 0x4a, 0x8f,
            0x7b, 0x5b, 0xc2, 0x45, 0x37, 0x27, 0x3e, 0xe8,
            0x26, 0xf1, 0xac, 0xa4, 0xac, 0xfa, 0xd8, 0x39,
            0x57, 0x9d, 0x70, 0x44, 0xf5, 0x0e, 0xc7, 0xfb,
            0x92, 0x7e, 0xf6, 0xb8, 0xbf, 0x35, 0xfe, 0xa2,
            0x21, 0x23, 0xf5, 0xe1, 0x33, 0xa7, 0x9a, 0x90
        },
        
    };
    for (uint8_t i = 0; i < 5; ++i)
        EXPECT_EQ(testLPS(pts[i]), res[i]);
}

TEST(StreebogTest, TestStreebog512Constructor) {
    Streebog512 hasher;
    SecureBuffer<64> zeroed; zeroed.zero();
    EXPECT_EQ(hasher.getHash(), zeroed);
    EXPECT_EQ(hasher.getBufferedLength(), 0);
    EXPECT_EQ(hasher.getN(), zeroed);
    EXPECT_EQ(hasher.getSum(), zeroed);
}

TEST(StreebogTest, TestStreebog256Constructor) {
    Streebog256 hasher;
    EXPECT_EQ(
        std::vector<uint8_t>(hasher.getHash().begin(), hasher.getHash().end()),
        std::vector<uint8_t>(64, 1)
    );
    SecureBuffer<64> zeroed; zeroed.zero();
    EXPECT_EQ(hasher.getN(), zeroed);
    EXPECT_EQ(hasher.getSum(), zeroed);
}

TEST(StreebogTest, TestPartialUpdate) {
    static const std::vector<uint8_t> message = {
        0x32, 0x31, 0x30, 0x39, 0x38, 0x37, 0x36, 0x35,
        0x34, 0x33, 0x32, 0x31, 0x30, 0x39, 0x38, 0x37,
        0x36, 0x35, 0x34, 0x33, 0x32, 0x31, 0x30, 0x39,
        0x38, 0x37, 0x36, 0x35, 0x34, 0x33, 0x32, 0x31,
        0x30, 0x39, 0x38, 0x37, 0x36, 0x35, 0x34, 0x33,
        0x32, 0x31, 0x30, 0x39, 0x38, 0x37, 0x36, 0x35,
        0x34, 0x33, 0x32, 0x31, 0x30, 0x39, 0x38, 0x37,
        0x36, 0x35, 0x34, 0x33, 0x32, 0x31, 0x30
    };
    Streebog512 hasher;
    hasher.update(message);
    EXPECT_EQ(hasher.getBufferedLength(), 63);
    std::vector<uint8_t> buffer =
        std::vector<uint8_t>(hasher.getBuffer().begin(), hasher.getBuffer().begin() + 63);
    EXPECT_TRUE(message == buffer)
        << "Actual buffer: " << ToHex(buffer) << "\n"
        << "Expected buffer: " << ToHex(message);
}

TEST(StreebogTest, TestMultiplePartialUpdate) {
    static const std::vector<uint8_t> message[] = {
        {0x32, 0x31, 0x30, 0x39, 0x38, 0x37, 0x36, 0x35},
        {0x34, 0x33, 0x32, 0x31, 0x30, 0x39, 0x38, 0x37},
        {0x36, 0x35, 0x34, 0x33, 0x32, 0x31, 0x30, 0x39},
        {0x38, 0x37, 0x36, 0x35, 0x34, 0x33, 0x32, 0x31},
        {0x30, 0x39, 0x38, 0x37, 0x36, 0x35, 0x34, 0x33},
        {0x32, 0x31, 0x30, 0x39, 0x38, 0x37, 0x36, 0x35},
        {0x34, 0x33, 0x32, 0x31, 0x30, 0x39, 0x38, 0x37},
        {0x36, 0x35, 0x34, 0x33, 0x32, 0x31, 0x30}
    };
    Streebog512 hasher;
    for (uint8_t i = 0; i < 7; ++i) {
        hasher.update(message[i]);
        EXPECT_EQ(hasher.getBufferedLength(), (i + 1) * 8);
        EXPECT_EQ(
            message[i],
            std::vector<uint8_t>(hasher.getBuffer().begin() + i * 8U,
                hasher.getBuffer().begin() + (i + 1U) * 8U)
        );
    }
    hasher.update(message[7]);
    EXPECT_EQ(hasher.getBufferedLength(), 63);
    EXPECT_EQ(
        message[7],
        std::vector<uint8_t>(hasher.getBuffer().begin() + 56, hasher.getBuffer().begin() + 63)
    );
}

TEST(StreebogTest, TestCompressUpdate) {
    static const std::vector<uint8_t> message = {
        0xd1, 0xe5, 0x20, 0xe2, 0xe5, 0xf2, 0xf0, 0xe8,
        0x2c, 0x20, 0xd1, 0xf2, 0xf0, 0xe8, 0xe1, 0xee,
        0xe6, 0xe8, 0x20, 0xe2, 0xed, 0xf3, 0xf6, 0xe8,
        0x2c, 0x20, 0xe2, 0xe5, 0xfe, 0xf2, 0xfa, 0x20,
        0xf1, 0x20, 0xec, 0xee, 0xf0, 0xff, 0x20, 0xf1,
        0xf2, 0xf0, 0xe5, 0xeb, 0xe0, 0xec, 0xe8, 0x20,
        0xed, 0xe0, 0x20, 0xf5, 0xf0, 0xe0, 0xe1, 0xf0,
        0xfb, 0xff, 0x20, 0xef, 0xeb, 0xfa, 0xea, 0xfb,
        0x20, 0xc8, 0xe3, 0xee, 0xf0, 0xe5, 0xe2, 0xfb
    };
    static const SecureBuffer compress_expected_result =  {
        0xaf, 0xc7, 0x07, 0xc4, 0xda, 0x6c, 0x81, 0x2e,
        0x85, 0xea, 0x2c, 0x8e, 0x1e, 0x22, 0x5d, 0x2e,
        0x48, 0x1f, 0x73, 0x89, 0x88, 0x3b, 0x84, 0xa7,
        0x6a, 0xa4, 0xc7, 0xf7, 0x9e, 0x77, 0xef, 0x98,
        0x7b, 0x51, 0x0c, 0x9b, 0x45, 0xac, 0xb7, 0x27,
        0xe1, 0xf8, 0x10, 0x8f, 0x93, 0x4e, 0x91, 0xe2,
        0x5d, 0x39, 0x95, 0x97, 0xcd, 0x4c, 0xbb, 0xe3,
        0x65, 0xa4, 0xfa, 0x12, 0x23, 0x60, 0x7f, 0xcd
    };
    Streebog512 hasher;
    hasher.update(message);
    EXPECT_EQ(hasher.getBufferedLength(), 8);
    std::vector<uint8_t> expected_buf(message.begin() + 64, message.end());
    std::vector<uint8_t> buf(hasher.getBuffer().begin(), hasher.getBuffer().begin() + 8);
    EXPECT_TRUE(buf == expected_buf)
        << "Buffer: " << ToHex(buf) << "\n"
        << "Expected buffer: " << ToHex(expected_buf);
    EXPECT_EQ(hasher.getHash(), compress_expected_result);
}

TEST(StreebogTest, TestBlockFillingUpdate) {
    static const std::vector<uint8_t> message[] = {
        {
            0xd1, 0xe5, 0x20, 0xe2, 0xe5, 0xf2, 0xf0, 0xe8,
            0x2c, 0x20, 0xd1, 0xf2, 0xf0, 0xe8, 0xe1, 0xee,
            0xe6, 0xe8, 0x20, 0xe2, 0xed, 0xf3, 0xf6, 0xe8,
            0x2c, 0x20, 0xe2, 0xe5, 0xfe, 0xf2, 0xfa, 0x20
        },
        {
            0xf1, 0x20, 0xec, 0xee, 0xf0, 0xff, 0x20, 0xf1,
            0xf2, 0xf0, 0xe5, 0xeb, 0xe0, 0xec, 0xe8, 0x20,
            0xed, 0xe0, 0x20, 0xf5, 0xf0, 0xe0, 0xe1, 0xf0,
            0xfb, 0xff, 0x20, 0xef, 0xeb, 0xfa, 0xea, 0xfb
        },
        {
            0x20, 0xc8, 0xe3, 0xee, 0xf0, 0xe5, 0xe2, 0xfb
        }
    };
    static const SecureBuffer compress_expected_result = {
        0xaf, 0xc7, 0x07, 0xc4, 0xda, 0x6c, 0x81, 0x2e,
        0x85, 0xea, 0x2c, 0x8e, 0x1e, 0x22, 0x5d, 0x2e,
        0x48, 0x1f, 0x73, 0x89, 0x88, 0x3b, 0x84, 0xa7,
        0x6a, 0xa4, 0xc7, 0xf7, 0x9e, 0x77, 0xef, 0x98,
        0x7b, 0x51, 0x0c, 0x9b, 0x45, 0xac, 0xb7, 0x27,
        0xe1, 0xf8, 0x10, 0x8f, 0x93, 0x4e, 0x91, 0xe2,
        0x5d, 0x39, 0x95, 0x97, 0xcd, 0x4c, 0xbb, 0xe3,
        0x65, 0xa4, 0xfa, 0x12, 0x23, 0x60, 0x7f, 0xcd
    };
    Streebog512 hasher;
    hasher.update(message[0]);
    EXPECT_EQ(hasher.getBufferedLength(), 32);
    std::vector<uint8_t> buf1(hasher.getBuffer().begin(), hasher.getBuffer().begin() + 32);
    EXPECT_TRUE(message[0] == buf1)
        << "Buffer: " << ToHex(buf1) << "\n"
        << "Expected buffer: " << ToHex(message[0]);
    hasher.update(message[1]);
    EXPECT_EQ(hasher.getBufferedLength(), 64);
    std::vector<uint8_t> buf2(hasher.getBuffer().begin() + 32, hasher.getBuffer().begin() + 64);
    EXPECT_TRUE(message[1] == buf2)
        << "Buffer: " << ToHex(buf2) << "\n"
        << "Expected buffer: " << ToHex(message[1]);
    hasher.update(message[2]);
    EXPECT_EQ(hasher.getBufferedLength(), 8);
    std::vector<uint8_t> buf3(hasher.getBuffer().begin(), hasher.getBuffer().begin() + 8);
    EXPECT_TRUE(message[2] == buf3)
        << "Buffer: " << ToHex(buf3) << "\n"
        << "Expected buffer: " << ToHex(message[2]);
    EXPECT_EQ(hasher.getHash(), compress_expected_result);
}

TEST(StreebogTest, TestBlockOverflowUpdate) {
    static const std::vector<uint8_t> message[] = {
        {
            0xd1, 0xe5, 0x20, 0xe2, 0xe5, 0xf2, 0xf0, 0xe8,
            0x2c, 0x20, 0xd1, 0xf2, 0xf0, 0xe8, 0xe1, 0xee,
            0xe6, 0xe8, 0x20, 0xe2, 0xed, 0xf3, 0xf6, 0xe8,
            0x2c, 0x20, 0xe2, 0xe5, 0xfe, 0xf2, 0xfa, 0x20
        },
        {
            0xf1, 0x20, 0xec, 0xee, 0xf0, 0xff, 0x20, 0xf1,
            0xf2, 0xf0, 0xe5, 0xeb, 0xe0, 0xec, 0xe8, 0x20,
            0xed, 0xe0, 0x20, 0xf5, 0xf0, 0xe0, 0xe1, 0xf0,
            0xfb, 0xff, 0x20, 0xef, 0xeb, 0xfa, 0xea, 0xfb,
            0x20, 0xc8, 0xe3, 0xee, 0xf0, 0xe5, 0xe2, 0xfb
        }
    };
    static const SecureBuffer compress_expected_result = {
        0xaf, 0xc7, 0x07, 0xc4, 0xda, 0x6c, 0x81, 0x2e,
        0x85, 0xea, 0x2c, 0x8e, 0x1e, 0x22, 0x5d, 0x2e,
        0x48, 0x1f, 0x73, 0x89, 0x88, 0x3b, 0x84, 0xa7,
        0x6a, 0xa4, 0xc7, 0xf7, 0x9e, 0x77, 0xef, 0x98,
        0x7b, 0x51, 0x0c, 0x9b, 0x45, 0xac, 0xb7, 0x27,
        0xe1, 0xf8, 0x10, 0x8f, 0x93, 0x4e, 0x91, 0xe2,
        0x5d, 0x39, 0x95, 0x97, 0xcd, 0x4c, 0xbb, 0xe3,
        0x65, 0xa4, 0xfa, 0x12, 0x23, 0x60, 0x7f, 0xcd
    };
    Streebog512 hasher;
    hasher.update(message[0]);
    EXPECT_EQ(hasher.getBufferedLength(), 32);
    std::vector<uint8_t> buf1(hasher.getBuffer().begin(), hasher.getBuffer().begin() + 32);
    EXPECT_TRUE(message[0] == buf1)
        << "Buffer: " << ToHex(buf1) << "\n"
        << "Expected buffer: " << ToHex(message[0]);
    hasher.update(message[1]);
    EXPECT_EQ(hasher.getBufferedLength(), 8);
    std::vector<uint8_t> buf2(hasher.getBuffer().begin(), hasher.getBuffer().begin() + 8);
    std::vector<uint8_t> expected_buf2(message[1].begin() + 32, message[1].end());
    EXPECT_TRUE(expected_buf2 == buf2)
        << "Buffer: " << ToHex(buf2) << "\n"
        << "Expected buffer: " << ToHex(expected_buf2);
    EXPECT_EQ(hasher.getHash(), compress_expected_result);
}

TEST(StreebogTest, TestZeroUpdate) {
    static const std::vector<uint8_t> message = {
        0xfb, 0xe2, 0xe5, 0xf0, 0xee, 0xe3, 0xc8, 0x20,
        0xfb, 0xea, 0xfa, 0xeb, 0xef, 0x20, 0xff, 0xfb,
        0xf0, 0xe1, 0xe0, 0xf0, 0xf5, 0x20, 0xe0, 0xed,
        0x20, 0xe8, 0xec, 0xe0, 0xeb, 0xe5, 0xf0, 0xf2,
    };
    Streebog512 hasher;
    hasher.update(message);
    hasher.update({});
    EXPECT_EQ(hasher.getBufferedLength(), 32);
    EXPECT_EQ(message, std::vector<uint8_t>(hasher.getBuffer().begin(),
        hasher.getBuffer().begin() + 32));
}

TEST(StreebogTest, TestDigest512) {
    static const std::vector<uint8_t> messages[] = {
        {
            0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37,
            0x38, 0x39, 0x30, 0x31, 0x32, 0x33, 0x34, 0x35,
            0x36, 0x37, 0x38, 0x39, 0x30, 0x31, 0x32, 0x33,
            0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x30, 0x31,
            0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39,
            0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37,
            0x38, 0x39, 0x30, 0x31, 0x32, 0x33, 0x34, 0x35,
            0x36, 0x37, 0x38, 0x39, 0x30, 0x31, 0x32
        },
        {
            0xd1, 0xe5, 0x20, 0xe2, 0xe5, 0xf2, 0xf0, 0xe8,
            0x2c, 0x20, 0xd1, 0xf2, 0xf0, 0xe8, 0xe1, 0xee,
            0xe6, 0xe8, 0x20, 0xe2, 0xed, 0xf3, 0xf6, 0xe8,
            0x2c, 0x20, 0xe2, 0xe5, 0xfe, 0xf2, 0xfa, 0x20,
            0xf1, 0x20, 0xec, 0xee, 0xf0, 0xff, 0x20, 0xf1,
            0xf2, 0xf0, 0xe5, 0xeb, 0xe0, 0xec, 0xe8, 0x20,
            0xed, 0xe0, 0x20, 0xf5, 0xf0, 0xe0, 0xe1, 0xf0,
            0xfb, 0xff, 0x20, 0xef, 0xeb, 0xfa, 0xea, 0xfb,
            0x20, 0xc8, 0xe3, 0xee, 0xf0, 0xe5, 0xe2, 0xfb
        }        
    };
    static const SecureBuffer<64> expected_Ns[] = {
        {
            0xf8, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
        },
        {
            0x40, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
        }        
    };
    static const SecureBuffer<64> expected_Sums[] = {
        {
            0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37,
            0x38, 0x39, 0x30, 0x31, 0x32, 0x33, 0x34, 0x35,
            0x36, 0x37, 0x38, 0x39, 0x30, 0x31, 0x32, 0x33,
            0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x30, 0x31,
            0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39,
            0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37,
            0x38, 0x39, 0x30, 0x31, 0x32, 0x33, 0x34, 0x35,
            0x36, 0x37, 0x38, 0x39, 0x30, 0x31, 0x32, 0x01
        },
        {
            0xf1, 0xad, 0x04, 0xd1, 0xd6, 0xd8, 0xd3, 0xe4,
            0x2e, 0x20, 0xd1, 0xf2, 0xf0, 0xe8, 0xe1, 0xee,
            0xe6, 0xe8, 0x20, 0xe2, 0xed, 0xf3, 0xf6, 0xe8,
            0x2c, 0x20, 0xe2, 0xe5, 0xfe, 0xf2, 0xfa, 0x20,
            0xf1, 0x20, 0xec, 0xee, 0xf0, 0xff, 0x20, 0xf1,
            0xf2, 0xf0, 0xe5, 0xeb, 0xe0, 0xec, 0xe8, 0x20,
            0xed, 0xe0, 0x20, 0xf5, 0xf0, 0xe0, 0xe1, 0xf0,
            0xfb, 0xff, 0x20, 0xef, 0xeb, 0xfa, 0xea, 0xfb
        }
    };
    static const std::vector<uint8_t> expected_hashes[] = {
        {
            0x1b, 0x54, 0xd0, 0x1a, 0x4a, 0xf5, 0xb9, 0xd5,
            0xcc, 0x3d, 0x86, 0xd6, 0x8d, 0x28, 0x54, 0x62,
            0xb1, 0x9a, 0xbc, 0x24, 0x75, 0x22, 0x2f, 0x35,
            0xc0, 0x85, 0x12, 0x2b, 0xe4, 0xba, 0x1f, 0xfa, 
            0x00, 0xad, 0x30, 0xf8, 0x76, 0x7b, 0x3a, 0x82,
            0x38, 0x4c, 0x65, 0x74, 0xf0, 0x24, 0xc3, 0x11,
            0xe2, 0xa4, 0x81, 0x33, 0x2b, 0x08, 0xef, 0x7f,
            0x41, 0x79, 0x78, 0x91, 0xc1, 0x64, 0x6f, 0x48
        },
        {
            0x1e, 0x88, 0xe6, 0x22, 0x26, 0xbf, 0xca, 0x6f,
            0x99, 0x94, 0xf1, 0xf2, 0xd5, 0x15, 0x69, 0xe0,
            0xda, 0xf8, 0x47, 0x5a, 0x3b, 0x0f, 0xe6, 0x1a,
            0x53, 0x00, 0xee, 0xe4, 0x6d, 0x96, 0x13, 0x76,
            0x03, 0x5f, 0xe8, 0x35, 0x49, 0xad, 0xa2, 0xb8,
            0x62, 0x0f, 0xcd, 0x7c, 0x49, 0x6c, 0xe5, 0xb3,
            0x3f, 0x0c, 0xb9, 0xdd, 0xdc, 0x2b, 0x64, 0x60,
            0x14, 0x3b, 0x03, 0xda, 0xba, 0xc9, 0xfb, 0x28
        }        
    };
    Streebog512 hasher;
    for (uint8_t i = 0; i < 2; ++i) {
        hasher.update(messages[i]);
        std::vector hash = hasher.digest();
        EXPECT_EQ(hasher.getN(), expected_Ns[i]);
        EXPECT_EQ(hasher.getSum(), expected_Sums[i]);
        EXPECT_TRUE(hash == expected_hashes[i])
            << "Actual hash: " << ToHex(hash) << "\n"
            << "Expected hash: " << ToHex(expected_hashes[i]);
        hasher.clear();
    }
}

TEST(StreebogTest, TestDigest256) {
    static const std::vector<uint8_t> messages[] = {
        {
            0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37,
            0x38, 0x39, 0x30, 0x31, 0x32, 0x33, 0x34, 0x35,
            0x36, 0x37, 0x38, 0x39, 0x30, 0x31, 0x32, 0x33,
            0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x30, 0x31,
            0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39,
            0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37,
            0x38, 0x39, 0x30, 0x31, 0x32, 0x33, 0x34, 0x35,
            0x36, 0x37, 0x38, 0x39, 0x30, 0x31, 0x32
        },
        {
            0xd1, 0xe5, 0x20, 0xe2, 0xe5, 0xf2, 0xf0, 0xe8,
            0x2c, 0x20, 0xd1, 0xf2, 0xf0, 0xe8, 0xe1, 0xee,
            0xe6, 0xe8, 0x20, 0xe2, 0xed, 0xf3, 0xf6, 0xe8,
            0x2c, 0x20, 0xe2, 0xe5, 0xfe, 0xf2, 0xfa, 0x20,
            0xf1, 0x20, 0xec, 0xee, 0xf0, 0xff, 0x20, 0xf1,
            0xf2, 0xf0, 0xe5, 0xeb, 0xe0, 0xec, 0xe8, 0x20,
            0xed, 0xe0, 0x20, 0xf5, 0xf0, 0xe0, 0xe1, 0xf0,
            0xfb, 0xff, 0x20, 0xef, 0xeb, 0xfa, 0xea, 0xfb,
            0x20, 0xc8, 0xe3, 0xee, 0xf0, 0xe5, 0xe2, 0xfb
        }       
    };
    static const std::vector<uint8_t> expected_hashes[] = {
        {
            0x9d, 0x15, 0x1e, 0xef, 0xd8, 0x59, 0x0b, 0x89,
            0xda, 0xa6, 0xba, 0x6c, 0xb7, 0x4a, 0xf9, 0x27,
            0x5d, 0xd0, 0x51, 0x02, 0x6b, 0xb1, 0x49, 0xa4,
            0x52, 0xfd, 0x84, 0xe5, 0xe5, 0x7b, 0x55, 0x00
        },        
        {
            0x9d, 0xd2, 0xfe, 0x4e, 0x90, 0x40, 0x9e, 0x5d,
            0xa8, 0x7f, 0x53, 0x97, 0x6d, 0x74, 0x05, 0xb0,
            0xc0, 0xca, 0xc6, 0x28, 0xfc, 0x66, 0x9a, 0x74,
            0x1d, 0x50, 0x06, 0x3c, 0x55, 0x7e, 0x8f, 0x50
        }  
    };
    Streebog256 hasher;
    for (uint8_t i = 0; i < 2; ++i) {
        hasher.update(messages[i]);
        std::vector hash = hasher.digest();
        EXPECT_TRUE(hash == expected_hashes[i])
            << "Actual hash: " << ToHex(hash) << "\n"
            << "Expected hash: " << ToHex(expected_hashes[i]);
        hasher.clear();
    }
}

TEST(StreebogTest, TestDigest512BigEndian) {
    static const std::vector<uint8_t> messages[] = {
        {
            0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37,
            0x38, 0x39, 0x30, 0x31, 0x32, 0x33, 0x34, 0x35,
            0x36, 0x37, 0x38, 0x39, 0x30, 0x31, 0x32, 0x33,
            0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x30, 0x31,
            0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39,
            0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37,
            0x38, 0x39, 0x30, 0x31, 0x32, 0x33, 0x34, 0x35,
            0x36, 0x37, 0x38, 0x39, 0x30, 0x31, 0x32
        },
        {
            0xd1, 0xe5, 0x20, 0xe2, 0xe5, 0xf2, 0xf0, 0xe8,
            0x2c, 0x20, 0xd1, 0xf2, 0xf0, 0xe8, 0xe1, 0xee,
            0xe6, 0xe8, 0x20, 0xe2, 0xed, 0xf3, 0xf6, 0xe8,
            0x2c, 0x20, 0xe2, 0xe5, 0xfe, 0xf2, 0xfa, 0x20,
            0xf1, 0x20, 0xec, 0xee, 0xf0, 0xff, 0x20, 0xf1,
            0xf2, 0xf0, 0xe5, 0xeb, 0xe0, 0xec, 0xe8, 0x20,
            0xed, 0xe0, 0x20, 0xf5, 0xf0, 0xe0, 0xe1, 0xf0,
            0xfb, 0xff, 0x20, 0xef, 0xeb, 0xfa, 0xea, 0xfb,
            0x20, 0xc8, 0xe3, 0xee, 0xf0, 0xe5, 0xe2, 0xfb
        }        
    };
    static const std::vector<uint8_t> expected_hashes[] = {
        {
            0x48, 0x6f, 0x64, 0xc1, 0x91, 0x78, 0x79, 0x41,
            0x7f, 0xef, 0x08, 0x2b, 0x33, 0x81, 0xa4, 0xe2,
            0x11, 0xc3, 0x24, 0xf0, 0x74, 0x65, 0x4c, 0x38,
            0x82, 0x3a, 0x7b, 0x76, 0xf8, 0x30, 0xad, 0x00,
            0xfa, 0x1f, 0xba, 0xe4, 0x2b, 0x12, 0x85, 0xc0,
            0x35, 0x2f, 0x22, 0x75, 0x24, 0xbc, 0x9a, 0xb1,
            0x62, 0x54, 0x28, 0x8d, 0xd6, 0x86, 0x3d, 0xcc,
            0xd5, 0xb9, 0xf5, 0x4a, 0x1a, 0xd0, 0x54, 0x1b
        },
        {
            0x28, 0xfb, 0xc9, 0xba, 0xda, 0x03, 0x3b, 0x14,
            0x60, 0x64, 0x2b, 0xdc, 0xdd, 0xb9, 0x0c, 0x3f,
            0xb3, 0xe5, 0x6c, 0x49, 0x7c, 0xcd, 0x0f, 0x62,
            0xb8, 0xa2, 0xad, 0x49, 0x35, 0xe8, 0x5f, 0x03,
            0x76, 0x13, 0x96, 0x6d, 0xe4, 0xee, 0x00, 0x53,
            0x1a, 0xe6, 0x0f, 0x3b, 0x5a, 0x47, 0xf8, 0xda,
            0xe0, 0x69, 0x15, 0xd5, 0xf2, 0xf1, 0x94, 0x99,
            0x6f, 0xca, 0xbf, 0x26, 0x22, 0xe6, 0x88, 0x1e
        }
    };
    Streebog512 hasher;
    for (uint8_t i = 0; i < 2; ++i) {
        hasher.update(messages[i]);
        std::vector hash = hasher.digest(Streebog::EndianOfUInt512::Big);
        EXPECT_TRUE(hash == expected_hashes[i])
            << "Actual hash: " << ToHex(hash) << "\n"
            << "Expected hash: " << ToHex(expected_hashes[i]);
        hasher.clear();
    }
}

TEST(StreebogTest, TestDigest256BigEndian) {
    static const std::vector<uint8_t> messages[] = {
        {
            0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37,
            0x38, 0x39, 0x30, 0x31, 0x32, 0x33, 0x34, 0x35,
            0x36, 0x37, 0x38, 0x39, 0x30, 0x31, 0x32, 0x33,
            0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x30, 0x31,
            0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39,
            0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37,
            0x38, 0x39, 0x30, 0x31, 0x32, 0x33, 0x34, 0x35,
            0x36, 0x37, 0x38, 0x39, 0x30, 0x31, 0x32
        },
        {
            0xd1, 0xe5, 0x20, 0xe2, 0xe5, 0xf2, 0xf0, 0xe8,
            0x2c, 0x20, 0xd1, 0xf2, 0xf0, 0xe8, 0xe1, 0xee,
            0xe6, 0xe8, 0x20, 0xe2, 0xed, 0xf3, 0xf6, 0xe8,
            0x2c, 0x20, 0xe2, 0xe5, 0xfe, 0xf2, 0xfa, 0x20,
            0xf1, 0x20, 0xec, 0xee, 0xf0, 0xff, 0x20, 0xf1,
            0xf2, 0xf0, 0xe5, 0xeb, 0xe0, 0xec, 0xe8, 0x20,
            0xed, 0xe0, 0x20, 0xf5, 0xf0, 0xe0, 0xe1, 0xf0,
            0xfb, 0xff, 0x20, 0xef, 0xeb, 0xfa, 0xea, 0xfb,
            0x20, 0xc8, 0xe3, 0xee, 0xf0, 0xe5, 0xe2, 0xfb
        }       
    };
    static const std::vector<uint8_t> expected_hashes[] = {
        {
            0x00, 0x55, 0x7b, 0xe5, 0xe5, 0x84, 0xfd, 0x52,
            0xa4, 0x49, 0xb1, 0x6b, 0x02, 0x51, 0xd0, 0x5d,
            0x27, 0xf9, 0x4a, 0xb7, 0x6c, 0xba, 0xa6, 0xda,
            0x89, 0x0b, 0x59, 0xd8, 0xef, 0x1e, 0x15, 0x9d
        },        
        {
            0x50, 0x8f, 0x7e, 0x55, 0x3c, 0x06, 0x50, 0x1d,
            0x74, 0x9a, 0x66, 0xfc, 0x28, 0xc6, 0xca, 0xc0,
            0xb0, 0x05, 0x74, 0x6d, 0x97, 0x53, 0x7f, 0xa8,
            0x5d, 0x9e, 0x40, 0x90, 0x4e, 0xfe, 0xd2, 0x9d
        }
    };
    Streebog256 hasher;
    for (uint8_t i = 0; i < 2; ++i) {
        hasher.update(messages[i]);
        std::vector hash = hasher.digest(Streebog::EndianOfUInt512::Big);
        EXPECT_TRUE(hash == expected_hashes[i])
            << "Actual hash: " << ToHex(hash) << "\n"
            << "Expected hash: " << ToHex(expected_hashes[i]);
        hasher.clear();
    }
}

TEST(StreebogTest, TestBufferDigest512) {
    static const std::vector<uint8_t> messages[] = {
        {
            0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37,
            0x38, 0x39, 0x30, 0x31, 0x32, 0x33, 0x34, 0x35,
            0x36, 0x37, 0x38, 0x39, 0x30, 0x31, 0x32, 0x33,
            0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x30, 0x31,
            0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39,
            0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37,
            0x38, 0x39, 0x30, 0x31, 0x32, 0x33, 0x34, 0x35,
            0x36, 0x37, 0x38, 0x39, 0x30, 0x31, 0x32
        },
        {
            0xd1, 0xe5, 0x20, 0xe2, 0xe5, 0xf2, 0xf0, 0xe8,
            0x2c, 0x20, 0xd1, 0xf2, 0xf0, 0xe8, 0xe1, 0xee,
            0xe6, 0xe8, 0x20, 0xe2, 0xed, 0xf3, 0xf6, 0xe8,
            0x2c, 0x20, 0xe2, 0xe5, 0xfe, 0xf2, 0xfa, 0x20,
            0xf1, 0x20, 0xec, 0xee, 0xf0, 0xff, 0x20, 0xf1,
            0xf2, 0xf0, 0xe5, 0xeb, 0xe0, 0xec, 0xe8, 0x20,
            0xed, 0xe0, 0x20, 0xf5, 0xf0, 0xe0, 0xe1, 0xf0,
            0xfb, 0xff, 0x20, 0xef, 0xeb, 0xfa, 0xea, 0xfb,
            0x20, 0xc8, 0xe3, 0xee, 0xf0, 0xe5, 0xe2, 0xfb
        }        
    };
    static const std::vector<uint8_t> expected_hashes[] = {
        {
            0x1b, 0x54, 0xd0, 0x1a, 0x4a, 0xf5, 0xb9, 0xd5,
            0xcc, 0x3d, 0x86, 0xd6, 0x8d, 0x28, 0x54, 0x62,
            0xb1, 0x9a, 0xbc, 0x24, 0x75, 0x22, 0x2f, 0x35,
            0xc0, 0x85, 0x12, 0x2b, 0xe4, 0xba, 0x1f, 0xfa, 
            0x00, 0xad, 0x30, 0xf8, 0x76, 0x7b, 0x3a, 0x82,
            0x38, 0x4c, 0x65, 0x74, 0xf0, 0x24, 0xc3, 0x11,
            0xe2, 0xa4, 0x81, 0x33, 0x2b, 0x08, 0xef, 0x7f,
            0x41, 0x79, 0x78, 0x91, 0xc1, 0x64, 0x6f, 0x48
        },
        {
            0x1e, 0x88, 0xe6, 0x22, 0x26, 0xbf, 0xca, 0x6f,
            0x99, 0x94, 0xf1, 0xf2, 0xd5, 0x15, 0x69, 0xe0,
            0xda, 0xf8, 0x47, 0x5a, 0x3b, 0x0f, 0xe6, 0x1a,
            0x53, 0x00, 0xee, 0xe4, 0x6d, 0x96, 0x13, 0x76,
            0x03, 0x5f, 0xe8, 0x35, 0x49, 0xad, 0xa2, 0xb8,
            0x62, 0x0f, 0xcd, 0x7c, 0x49, 0x6c, 0xe5, 0xb3,
            0x3f, 0x0c, 0xb9, 0xdd, 0xdc, 0x2b, 0x64, 0x60,
            0x14, 0x3b, 0x03, 0xda, 0xba, 0xc9, 0xfb, 0x28
        }  
    };
    Streebog512 hasher;
    for (uint8_t i = 0; i < 2; ++i) {
        hasher.update(messages[i]);
        std::vector<uint8_t> hash(64);
        hasher.digest(hash.data());
        EXPECT_TRUE(hash == expected_hashes[i])
            << "Actual hash: " << ToHex(hash) << "\n"
            << "Expected hash: " << ToHex(expected_hashes[i]);
        hasher.clear();
    }
}

TEST(StreebogTest, TestBufferDigest256) {
    static const std::vector<uint8_t> messages[] = {
        {
            0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37,
            0x38, 0x39, 0x30, 0x31, 0x32, 0x33, 0x34, 0x35,
            0x36, 0x37, 0x38, 0x39, 0x30, 0x31, 0x32, 0x33,
            0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x30, 0x31,
            0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39,
            0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37,
            0x38, 0x39, 0x30, 0x31, 0x32, 0x33, 0x34, 0x35,
            0x36, 0x37, 0x38, 0x39, 0x30, 0x31, 0x32
        },
        {
            0xd1, 0xe5, 0x20, 0xe2, 0xe5, 0xf2, 0xf0, 0xe8,
            0x2c, 0x20, 0xd1, 0xf2, 0xf0, 0xe8, 0xe1, 0xee,
            0xe6, 0xe8, 0x20, 0xe2, 0xed, 0xf3, 0xf6, 0xe8,
            0x2c, 0x20, 0xe2, 0xe5, 0xfe, 0xf2, 0xfa, 0x20,
            0xf1, 0x20, 0xec, 0xee, 0xf0, 0xff, 0x20, 0xf1,
            0xf2, 0xf0, 0xe5, 0xeb, 0xe0, 0xec, 0xe8, 0x20,
            0xed, 0xe0, 0x20, 0xf5, 0xf0, 0xe0, 0xe1, 0xf0,
            0xfb, 0xff, 0x20, 0xef, 0xeb, 0xfa, 0xea, 0xfb,
            0x20, 0xc8, 0xe3, 0xee, 0xf0, 0xe5, 0xe2, 0xfb
        }       
    };
    static const std::vector<uint8_t> expected_hashes[] = {
        {
            0x9d, 0x15, 0x1e, 0xef, 0xd8, 0x59, 0x0b, 0x89,
            0xda, 0xa6, 0xba, 0x6c, 0xb7, 0x4a, 0xf9, 0x27,
            0x5d, 0xd0, 0x51, 0x02, 0x6b, 0xb1, 0x49, 0xa4,
            0x52, 0xfd, 0x84, 0xe5, 0xe5, 0x7b, 0x55, 0x00
        },        
        {
            0x9d, 0xd2, 0xfe, 0x4e, 0x90, 0x40, 0x9e, 0x5d,
            0xa8, 0x7f, 0x53, 0x97, 0x6d, 0x74, 0x05, 0xb0,
            0xc0, 0xca, 0xc6, 0x28, 0xfc, 0x66, 0x9a, 0x74,
            0x1d, 0x50, 0x06, 0x3c, 0x55, 0x7e, 0x8f, 0x50
        }
    };
    Streebog256 hasher;
    for (uint8_t i = 0; i < 2; ++i) {
        hasher.update(messages[i]);
        std::vector<uint8_t> hash(32);
        hasher.digest(hash.data());
        EXPECT_TRUE(hash == expected_hashes[i])
            << "Actual hash: " << ToHex(hash) << "\n"
            << "Expected hash: " << ToHex(expected_hashes[i]);
        hasher.clear();
    }
}

TEST(StreebogTest, TestBufferDigest512BigEndian) {
    static const std::vector<uint8_t> messages[] = {
        {
            0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37,
            0x38, 0x39, 0x30, 0x31, 0x32, 0x33, 0x34, 0x35,
            0x36, 0x37, 0x38, 0x39, 0x30, 0x31, 0x32, 0x33,
            0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x30, 0x31,
            0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39,
            0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37,
            0x38, 0x39, 0x30, 0x31, 0x32, 0x33, 0x34, 0x35,
            0x36, 0x37, 0x38, 0x39, 0x30, 0x31, 0x32
        },
        {
            0xd1, 0xe5, 0x20, 0xe2, 0xe5, 0xf2, 0xf0, 0xe8,
            0x2c, 0x20, 0xd1, 0xf2, 0xf0, 0xe8, 0xe1, 0xee,
            0xe6, 0xe8, 0x20, 0xe2, 0xed, 0xf3, 0xf6, 0xe8,
            0x2c, 0x20, 0xe2, 0xe5, 0xfe, 0xf2, 0xfa, 0x20,
            0xf1, 0x20, 0xec, 0xee, 0xf0, 0xff, 0x20, 0xf1,
            0xf2, 0xf0, 0xe5, 0xeb, 0xe0, 0xec, 0xe8, 0x20,
            0xed, 0xe0, 0x20, 0xf5, 0xf0, 0xe0, 0xe1, 0xf0,
            0xfb, 0xff, 0x20, 0xef, 0xeb, 0xfa, 0xea, 0xfb,
            0x20, 0xc8, 0xe3, 0xee, 0xf0, 0xe5, 0xe2, 0xfb
        }        
    };
    static const std::vector<uint8_t> expected_hashes[] = {
        {
            0x48, 0x6f, 0x64, 0xc1, 0x91, 0x78, 0x79, 0x41,
            0x7f, 0xef, 0x08, 0x2b, 0x33, 0x81, 0xa4, 0xe2,
            0x11, 0xc3, 0x24, 0xf0, 0x74, 0x65, 0x4c, 0x38,
            0x82, 0x3a, 0x7b, 0x76, 0xf8, 0x30, 0xad, 0x00,
            0xfa, 0x1f, 0xba, 0xe4, 0x2b, 0x12, 0x85, 0xc0,
            0x35, 0x2f, 0x22, 0x75, 0x24, 0xbc, 0x9a, 0xb1,
            0x62, 0x54, 0x28, 0x8d, 0xd6, 0x86, 0x3d, 0xcc,
            0xd5, 0xb9, 0xf5, 0x4a, 0x1a, 0xd0, 0x54, 0x1b
        },
        {
            0x28, 0xfb, 0xc9, 0xba, 0xda, 0x03, 0x3b, 0x14,
            0x60, 0x64, 0x2b, 0xdc, 0xdd, 0xb9, 0x0c, 0x3f,
            0xb3, 0xe5, 0x6c, 0x49, 0x7c, 0xcd, 0x0f, 0x62,
            0xb8, 0xa2, 0xad, 0x49, 0x35, 0xe8, 0x5f, 0x03,
            0x76, 0x13, 0x96, 0x6d, 0xe4, 0xee, 0x00, 0x53,
            0x1a, 0xe6, 0x0f, 0x3b, 0x5a, 0x47, 0xf8, 0xda,
            0xe0, 0x69, 0x15, 0xd5, 0xf2, 0xf1, 0x94, 0x99,
            0x6f, 0xca, 0xbf, 0x26, 0x22, 0xe6, 0x88, 0x1e
        }
    };
    Streebog512 hasher;
    for (uint8_t i = 0; i < 2; ++i) {
        hasher.update(messages[i]);
        std::vector<uint8_t> hash(64);
        hasher.digest(hash.data(), Streebog::EndianOfUInt512::Big);
        EXPECT_TRUE(hash == expected_hashes[i])
            << "Actual hash: " << ToHex(hash) << "\n"
            << "Expected hash: " << ToHex(expected_hashes[i]);
        hasher.clear();
    }
}

TEST(StreebogTest, TestBufferDigest256BigEndian) {
    static const std::vector<uint8_t> messages[] = {
        {
            0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37,
            0x38, 0x39, 0x30, 0x31, 0x32, 0x33, 0x34, 0x35,
            0x36, 0x37, 0x38, 0x39, 0x30, 0x31, 0x32, 0x33,
            0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x30, 0x31,
            0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39,
            0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37,
            0x38, 0x39, 0x30, 0x31, 0x32, 0x33, 0x34, 0x35,
            0x36, 0x37, 0x38, 0x39, 0x30, 0x31, 0x32
        },
        {
            0xd1, 0xe5, 0x20, 0xe2, 0xe5, 0xf2, 0xf0, 0xe8,
            0x2c, 0x20, 0xd1, 0xf2, 0xf0, 0xe8, 0xe1, 0xee,
            0xe6, 0xe8, 0x20, 0xe2, 0xed, 0xf3, 0xf6, 0xe8,
            0x2c, 0x20, 0xe2, 0xe5, 0xfe, 0xf2, 0xfa, 0x20,
            0xf1, 0x20, 0xec, 0xee, 0xf0, 0xff, 0x20, 0xf1,
            0xf2, 0xf0, 0xe5, 0xeb, 0xe0, 0xec, 0xe8, 0x20,
            0xed, 0xe0, 0x20, 0xf5, 0xf0, 0xe0, 0xe1, 0xf0,
            0xfb, 0xff, 0x20, 0xef, 0xeb, 0xfa, 0xea, 0xfb,
            0x20, 0xc8, 0xe3, 0xee, 0xf0, 0xe5, 0xe2, 0xfb
        }       
    };
    static const std::vector<uint8_t> expected_hashes[] = {
        {
            0x00, 0x55, 0x7b, 0xe5, 0xe5, 0x84, 0xfd, 0x52,
            0xa4, 0x49, 0xb1, 0x6b, 0x02, 0x51, 0xd0, 0x5d,
            0x27, 0xf9, 0x4a, 0xb7, 0x6c, 0xba, 0xa6, 0xda,
            0x89, 0x0b, 0x59, 0xd8, 0xef, 0x1e, 0x15, 0x9d
        },        
        {
            0x50, 0x8f, 0x7e, 0x55, 0x3c, 0x06, 0x50, 0x1d,
            0x74, 0x9a, 0x66, 0xfc, 0x28, 0xc6, 0xca, 0xc0,
            0xb0, 0x05, 0x74, 0x6d, 0x97, 0x53, 0x7f, 0xa8,
            0x5d, 0x9e, 0x40, 0x90, 0x4e, 0xfe, 0xd2, 0x9d
        }
    };
    Streebog256 hasher;
    for (uint8_t i = 0; i < 2; ++i) {
        hasher.update(messages[i]);
        std::vector<uint8_t> hash(32);
        hasher.digest(hash.data(), Streebog::EndianOfUInt512::Big);
        EXPECT_TRUE(hash == expected_hashes[i])
            << "Actual hash: " << ToHex(hash) << "\n"
            << "Expected hash: " << ToHex(expected_hashes[i]);
        hasher.clear();
    }
}

TEST(StreebogTest, TestFullBlockMessageDigest) {
    static const std::vector<uint8_t> message = {
        0x5C, 0x5D, 0x5E, 0x5F, 0x58, 0x59, 0x5A, 0x5B,
        0x54, 0x55, 0x56, 0x57, 0x50, 0x51, 0x52, 0x53,
        0x4C, 0x4D, 0x4E, 0x4F, 0x48, 0x49, 0x4A, 0x4B,
        0x44, 0x45, 0x46, 0x47, 0x40, 0x41, 0x42, 0x43,
        0x5C, 0x5C, 0x5C, 0x5C, 0x5C, 0x5C, 0x5C, 0x5C,
        0x5C, 0x5C, 0x5C, 0x5C, 0x5C, 0x5C, 0x5C, 0x5C,
        0x5C, 0x5C, 0x5C, 0x5C, 0x5C, 0x5C, 0x5C, 0x5C,
        0x5C, 0x5C, 0x5C, 0x5C, 0x5C, 0x5C, 0x5C, 0x5C,
        0x0D, 0x5A, 0x45, 0xFE, 0x1A, 0x3A, 0xF3, 0xD8,
        0xB8, 0xDE, 0x72, 0x4D, 0x6E, 0x03, 0xDE, 0x7B,
        0xFA, 0xEB, 0x47, 0x9C, 0xEA, 0xF4, 0xB9, 0xDA,
        0xE6, 0x58, 0xEF, 0xFB, 0x30, 0xD0, 0x92, 0x87,
        0x08, 0x11, 0x64, 0x76, 0x72, 0x18, 0xD4, 0xDB,
        0x50, 0x8F, 0x6F, 0xD1, 0xB3, 0x55, 0xAB, 0x0E,
        0x47, 0xD2, 0xA1, 0xFE, 0xFC, 0xC5, 0x13, 0xF7,
        0x79, 0xAC, 0x47, 0xA7, 0x23, 0xB6, 0xFC, 0x92
    };
    static const std::vector<uint8_t> expected_hash = {
        0xa5, 0x9b, 0xab, 0x22, 0xec, 0xae, 0x19, 0xc6,
        0x5f, 0xbd, 0xe6, 0xe5, 0xf4, 0xe9, 0xf5, 0xd8,
        0x54, 0x9d, 0x31, 0xf0, 0x37, 0xf9, 0xdf, 0x9b,
        0x90, 0x55, 0x00, 0xe1, 0x71, 0x92, 0x3a, 0x77,
        0x3d, 0x5f, 0x15, 0x30, 0xf2, 0xed, 0x7e, 0x96,
        0x4c, 0xb2, 0xee, 0xdc, 0x29, 0xe9, 0xad, 0x2f,
        0x3a, 0xfe, 0x93, 0xb2, 0x81, 0x4f, 0x79, 0xf5,
        0x00, 0x0f, 0xfc, 0x03, 0x66, 0xc2, 0x51, 0xe6
    };
    Streebog512 hasher;
    hasher.update(message);
    const std::vector<uint8_t> hash = hasher.digest();
    EXPECT_TRUE(hash == expected_hash)
        << "Actual hash: " << ToHex(hash) << "\n"
        << "Expected hash: " << ToHex(expected_hash);
}

int main(int argc, char **argv) {
    ::testing::InitGoogleTest(&argc, argv);
    return RUN_ALL_TESTS();
}